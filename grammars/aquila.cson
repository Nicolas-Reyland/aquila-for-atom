# grammars/aquila.cson
# repo: https://github.com/Nicolas-Reyland/aquila-for-atom

scopeName: 'source.aquila'
name: 'Aquila'
fileTypes: [ 'aq' ]
limitLineLength: false

patterns: [
  # comments
  {
    comment: 'single-line comment'
    name: 'comment.line.aquila'
    match: '//.*$'
  }
  {
    comment: 'multiple-lines comment'
    contentName: 'comment.block.aquila'
    begin: '\\/\\*\\*'
    beginCaptures:
      0: name: 'comment.block.aquila'
    end: '\\*\\*\\/'
    endCaptures:
      0: name: 'comment.block.aquila'
  }
  # instructions
  {
    comment: 'nested instructions'
    contentName: 'markup.other.forloop.aquila'
    begin: '(for |if | while )(\\()(.*)(\\))'
    beginCaptures:
      1: name: 'keyword.control.aquila'
      3: patterns: [{ include: '$self' }]
    end: 'end\\-for|end-if|end-while'
    endCaptures:
      0: name: 'keyword.control.aquila'
    patterns: [
      match: 'else'
      name: 'keyword.control.aquila'
      { include: '$self' }
    ]
  }
  # PreProcessor
  {
    comment: 'macro PreProcessor name'
    match: '(#name) (.*)'
    captures:
      1: name: 'entity.name.tag.aquila'
      2: name: 'entity.name.section.aquila'
  }
  {
    comment: 'macro PreProcessor'
    match: '(#[a-zA-Z]*) (.*)'
    captures:
      1: name: 'entity.name.tag.aquila'
      2: name: 'string.unquoted.aquila'
  }
  # declarations
  # '/^if$/|/^else$/|/^end-if$/|/^for$/|/^end-for$/|/^while$/|/^end-while$/|/^declare$/|/^overwrite$/|/^safe$/|/^trace$/|/^void$/|/^auto$/|/^int$/|/^float$/|/^bool$/|/^list$/|/^function$/'
  # '[^a-zA-Z_].*|.*[^0-9a-zA-Z_].*'
  {
    comment: 'variable declaration with explicit type and value'
    match: '(declare) (int|float|bool|list|auto) ([a-zA-Z_]+[0-9a-zA-Z_]*) (.+)' # cannot check for invalid value (spaces) because in-for-loop declaration
    captures:
      1: name: 'storage.modifier.aquila'
      2:
        name: 'support.type.aquila'
        patterns: [{
          match: 'auto'
          name: 'support.other.aquila'
        }]
      3: # var name in keywords ?
        name: 'variable.other.aquila'
        patterns: [{
          match: '^if$|^else$|^end-if$|^for$|^end-for$|^while$|^end-while$|^declare$|^overwrite$|^safe$|^trace$|^void$|^auto$|^int$|^float$|^bool$|^list$|^function$'
          name: 'invalid.illegal.aquila'
        }]
      4:
        name: 'constant.other.aquila'
        patterns: [{ include: '$self' }]
  }
  {
    comment: 'variable declaration with explicit type'
    match: '(declare) (int|float|bool|list) ([a-zA-Z_]+[0-9a-zA-Z_]*)'
    captures:
      1: name: 'storage.modifier.aquila'
      2:
        name: 'support.type.aquila'
        patterns: [{
          match: 'auto'
          name: 'support.other.aquila'
        }]
      3: # var name in keywords ?
        name: 'variable.other.aquila'
        patterns: [{
          match: '[^a-zA-Z_]|^if$|^else$|^end-if$|^for$|^end-for$|^while$|^end-while$|^declare$|^overwrite$|^safe$|^trace$|^void$|^auto$|^int$|^float$|^bool$|^list$|^function$'
          name: 'invalid.illegal.aquila'
        }]
  }
  {
    comment: 'variable declaration with value'
    match: '(declare) ([a-zA-Z_]+[0-9a-zA-Z_]*) (.+)' # cannot check for invalid value (spaces) because in-for-loop declaration
    captures:
      1: name: 'storage.modifier.aquila'
      2: # var name in keywords ?
        name: 'variable.other.aquila'
        patterns: [{
          match: '^if$|^else$|^end-if$|^for$|^end-for$|^while$|^end-while$|^declare$|^overwrite$|^safe$|^trace$|^void$|^auto$|^int$|^float$|^bool$|^list$|^function$'
          name: 'invalid.illegal.aquila'
        }]
      3:
        name: 'constant.other.aquila'
        patterns: [{ include: '$self' }]
  }
  # assignments
  {
    comment: 'assignment "="'
    match: '\\='
    name: 'keyword.other.aquila'
  }
  # symbols (variables, AL operators, etc.) -> excludes variable types
  {
    comment: 'variables'
    match: '\\$[a-zA-Z_]+[0-9a-zA-Z_]*'
    name: 'variable.other.aquila'
  }
  {
    comment: 'list variables access using brackets []'
    match: '(\\$[a-zA-Z_]+[0-9a-zA-Z_]*)(\\[)([^\\[\\]]*)(\\])'
    captures:
      1: 'variable.other.aquila'
      2: 'string.interpolated.aquila'
      3: patterns: [{ include: '$self' }]
      4: 'string.interpolated.aquila'
  }
  {
    comment: 'arithmetical & logical operators' # BROKEN ? (test one by one)
    match: '[\\+\\-\\*\\/\\%\\<\\>\\{\\}\\:\\~\\&\\|\\^]'
    name: 'keyword.operator.aquila'
  }
  {
    comment: 'comma separator'
    match: '\\,'
    name: 'string.quoted.other.aquila'
  }
  # functions
  {
    comment: 'control keyword return'
    match: '(return)(\\()([^\\(\\)]*)(\\))'
    captures:
      1: name: 'keyword.control.aquila'
      2: name: 'string.interpolated.aquila'
      3: patterns: [{ include: '$self' }]
      4: name: 'string.interpolated.aquila'
  }
  {
    comment: 'loop control keywords'
    match: '(continue|break)(\\()([^\\(\\)]*)(\\))'
    captures:
      1: name: 'keyword.control.aquila'
      2: name: 'string.interpolated.aquila'
      3: name: 'invalid.illegal.aquila'
      4: name: 'string.interpolated.aquila'
  }
  {
    comment: 'other keywords'
    match: '(trace|trace_func) (.*)'
    captures:
      1: name: 'support.class.aquila'
      2: patterns: [{ include: '$self' }]
  }
  {
    comment: 'print_str & print_str_endl functions'
    match: '(print_str|print_str_endl)(\\()(.*)(\\))' # maybe we use quotes after all ? idk
    captures:
      1: name: 'support.function.aquila'
      2: name: 'string.interpolated.aquila'
      3: name: 'markup.raw.aquila'
      4: name: 'string.interpolated.aquila'
  }
  {
    comment: 'all other functions'
    match: '([a-zA-Z_]+[0-9a-zA-Z_]*)(\\()([^\\(\\)]*)(\\))'
    captures:
      1: name: 'support.function.aquila'
      2: name: 'string.interpolated.aquila'
      3:
        name: 'variable.parameter.aquila'
        patterns: [{ include: '$self' }]
      4: name: 'string.interpolated.aquila'
  }
  # variable types
  {
    comment: 'integers & floats'
    match: '[0-9]+[\\.[0-9]+]?f?'
    name: 'constant.numeric.aquila'
  }
  {
    comments: 'bools'
    match: 'true|false'
    name: 'constant.language.aquila'
  }
  {
    comment: 'lists'
    match: '(\\[)(.*)(\\])'
    captures:
     1: name: 'string.interpolated.aquila'
     2: patterns: [{ include: '$self' }]
     3: name: 'string.interpolated.aquila'
  }
]














#
